#!/usr/bin/env node
const cluster = require('cluster');
const os = require('os');
let app = require('../app').app;
let serverGQL = require('../app').serverGQL;
let debug = require('debug')('zakaji.kz-api:server');
let http = require('http');
const start = require('../module/start');

if (cluster.isMaster) {
    start.start();
    let cpuCount = os.cpus().length
    for (let i = 0; i < cpuCount; i += 1) {
        cluster.fork();
        console.log('cluster '+i+' run')
    }
} else {
/**
 * Module dependencies.
 */


    /**
     * Get port from environment and store in Express.
     */

    let port = normalizePort(process.env.URL.trim()!=='http://localhost'?'4000':'3000');
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    let server = http.createServer(app);
    serverGQL.installSubscriptionHandlers(server)

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port, () => {
        console.log(`? Server ready at http://${process.env.URL}:${port}${serverGQL.graphqlPath}`)
        console.log(`? Subscriptions ready at ws://${process.env.URL}:${port}${serverGQL.subscriptionsPath}`)
    });
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Normalize a port into a number, string, or false.
     */
    module.exports = server;
    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }
    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }

}
